// <auto-generated />
using System;
using GManage.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GManage.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20220808082550_InitialAuthSchema")]
    partial class InitialAuthSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("auth.resource_id_seq");

            modelBuilder.HasSequence<int>("auth.user_id_seq");

            modelBuilder.Entity("GManage.Models.Auth.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"auth.resource_id_seq\"')");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("service", "auth");
                });

            modelBuilder.Entity("GManage.Models.Auth.ResourceUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("resource_user", "auth");
                });

            modelBuilder.Entity("GManage.Models.Auth.Session", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("SessionId")
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.Property<string>("ClientAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_addr");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("timestamp without timezone")
                        .HasColumnName("accessed_at");

                    b.HasKey("UserId", "SessionId");

                    b.ToTable("session", "auth");
                });

            modelBuilder.Entity("GManage.Models.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"auth.user_id_seq\"')");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pass_hash");

                    b.HasKey("Id");

                    b.ToTable("user", "auth");
                });

            modelBuilder.Entity("GManage.Models.Auth.ResourceUser", b =>
                {
                    b.HasOne("GManage.Models.Auth.Resource", "Resource")
                        .WithMany("ResourceUsers")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GManage.Models.Auth.User", "User")
                        .WithMany("ResourceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GManage.Models.Auth.Session", b =>
                {
                    b.HasOne("GManage.Models.Auth.User", "User")
                        .WithMany("SessionList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GManage.Models.Auth.Resource", b =>
                {
                    b.Navigation("ResourceUsers");
                });

            modelBuilder.Entity("GManage.Models.Auth.User", b =>
                {
                    b.Navigation("ResourceUsers");

                    b.Navigation("SessionList");
                });
#pragma warning restore 612, 618
        }
    }
}
